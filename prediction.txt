# to predict the progression 

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, roc_auc_score
from sklearn.metrics import precision_score, recall_score, f1_score, mean_squared_error, r2_score
from sklearn.metrics import roc_curve, auc
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

# Load the dataset
data = pd.read_csv(list(uploaded.keys())[0])

# Selecting input features and target
X = data[['gender', 'age', 'hypertension', 'heart_disease', 'bmi', 'HbA1c_level', 'blood_glucose_level', 'diabetes']]
y = data['risk_probability'].apply(lambda x: 1 if x >= 50 else 0)  # Assuming 50 as a threshold for binary classification

# Splitting the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Calculate the mean values for the features the user will not enter (HbA1c_level, blood_glucose_level, diabetes)
mean_HbA1c = X_train['HbA1c_level'].mean()
mean_glucose = X_train['blood_glucose_level'].mean()
mean_diabetes = X_train['diabetes'].mean()

# List of models to evaluate
models = {
    "Logistic Regression": LogisticRegression(max_iter=500),
    "Random Forest": RandomForestClassifier(),
    "Neural Network": MLPClassifier(max_iter=500),
    "SVM": SVC(probability=True),
    "Decision Tree": DecisionTreeClassifier(),
    "Gradient Boosting": GradientBoostingClassifier()
}

# Function to evaluate a model with MSE and R-squared
def evaluate_model(name, model, X_train, X_test, y_train, y_test):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:, 1] if hasattr(model, "predict_proba") else model.decision_function(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    auc_roc = roc_auc_score(y_test, y_prob)

    # MSE and R-squared based on probabilities
    mse = mean_squared_error(y_test, y_prob)
    r2 = r2_score(y_test, y_prob)

    # Print metrics
    print(f"=== {name} ===")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1-Score: {f1:.4f}")
    print(f"AUC-ROC: {auc_roc:.4f}")
    print(f"MSE: {mse:.4f}")
    print(f"R-squared: {r2:.4f}")

    # Confusion Matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(5,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f"{name} - Confusion Matrix")
    plt.ylabel('Actual')
    plt.xlabel('Predicted')
    plt.show()

    # Classification Report
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

# Evaluate each model
for name, model in models.items():
    evaluate_model(name, model, X_train, X_test, y_train, y_test)

# Pick the Logistic Regression model for risk probability prediction
LogisticRegression_model = LogisticRegression()
LogisticRegression_model.fit(X_train, y_train)

# Function to predict risk probability based on user input
def predict_risk(gender, age, hypertension, heart_disease, bmi, HbA1c_level, blood_glucose_level, diabetes):
    # Create a dataframe for the input data
    user_data = pd.DataFrame({
        'gender': [gender],
        'age': [age],
        'hypertension': [hypertension],
        'heart_disease': [heart_disease],
        'bmi': [bmi],
        'HbA1c_level': [HbA1c_level],
        'blood_glucose_level': [blood_glucose_level],
        'diabetes': [diabetes]
    })

    # Predict risk probability
    predicted_probability = LogisticRegression_model.predict_proba(user_data)[:, 1]

    return predicted_probability[0] * 100  # Return as percentage

# Example: Predict based on user input
# You can replace these values with actual inputs from a user or UI
gender = int(input("Enter Gender (0 for Female, 1 for Male): "))
age = float(input("Enter Age: "))
hypertension = int(input("Do you have Hypertension? (0 for No, 1 for Yes): "))
heart_disease = int(input("Do you have Heart Disease? (0 for No, 1 for Yes): "))
bmi = float(input("Enter BMI: "))
HbA1c_level = float(input("Enter HbA1c Level: "))
blood_glucose_level = float(input("Enter Blood Glucose Level: "))
diabetes = int(input("Do you have Diabetes Currently? (0 for No, 1 for Yes): "))

risk_probability = predict_risk(gender, age, hypertension, heart_disease, bmi, HbA1c_level, blood_glucose_level, diabetes)
print(f"The predicted risk probability is: {risk_probability:.2f}%")
